variable "authorized_app_id" {
  description = "Authorized client application in settings 'Expose an API'"
  type        = string
  default     = null
  nullable    = true
}

variable "display_name" {
  description = "The display name of the App Registration."
  type        = string
  default     = null
  nullable    = true
}

variable "name" {
  description = "The name of the App Registration."
  type        = string
  default     = null
  nullable    = true
}

variable "resourceIdentifier" {
  description = "Identifier of the resource e.g. api, app, or empty."
  type        = string
  default     = null
  nullable    = true
}

variable "owners" {
  description = "IDs of the owner"
  type        = list(string)
  nullable    = false
}

variable "terraformServicePrincipalObjectId" {
  description = "Service principal object id."
  type        = string
  default     = null
  nullable    = true

  validation {
    condition = (
      (var.terraformServicePrincipalObjectId == null && var.terraformServicePrincipalClientId == null && var.terraformServicePrincipalDisplayName == null) ||
      (var.terraformServicePrincipalObjectId != null && var.terraformServicePrincipalClientId == null && var.terraformServicePrincipalDisplayName == null) ||
      (var.terraformServicePrincipalObjectId == null && var.terraformServicePrincipalClientId != null && var.terraformServicePrincipalDisplayName == null) ||
      (var.terraformServicePrincipalObjectId == null && var.terraformServicePrincipalClientId == null && var.terraformServicePrincipalDisplayName != null)
    )
    error_message = "Only one of [terraformServicePrincipalObjectId, terraformServicePrincipalClientId, terraformServicePrincipalDisplayName] can be non-null, or all must be null."
  }
}

variable "terraformServicePrincipalClientId" {
  description = "Service principal client id."
  type        = string
  default     = null
  nullable    = true
}

variable "terraformServicePrincipalDisplayName" {
  description = "Service principal display name."
  type        = string
  default     = null
  nullable    = true
}

variable "sign_in_audience" {
  description = <<EOT
    The Microsoft account types that are supported for the current application.
    Must be one of [AzureADMyOrg], [AzureADMultipleOrgs], [AzureADandPersonalMicrosoftAccount] or [PersonalMicrosoftAccount]. Defaults to AzureADMyOrg.
  EOT
  type        = string
  default     = "AzureADMyOrg"
}

variable "environment" {
  description = "This variable specifies the current environment. Must be on of [dev],[test] or [prod]"
  type        = string
  default     = ""
  nullable    = false
}

variable "is_frontend" {
  description = "Distinguish between frontend and backend registration"
  type        = bool
  default     = false
}

variable "identifier_uri_with_name" {
  description = "Identifier URI with name"
  type        = bool
  default     = true
}

variable "identifier_uris" {
  description = "The URIs that identify the application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant."
  type        = list(string)
  default     = null
  nullable    = true
}

variable "required_resource_access" {
  description = <<EOT
  Required resource access for this application. A collection of required_resource_access blocks as documented below. Each block supports the following:
  [resource_access] (Required) A collection of resource_access blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
  [resource_app_id] (Required) The unique identifier for the resource that the application requires access to. This should be the Application ID of the target application.
  EOT
  type = list(
    object({
      resource_app_id = string
      resource_access = list(
        object({
          id   = string
          type = string
      }))
  }))
  nullable = false
}

variable "app_roles" {
  description = <<EOT
  (Optional) A map of app_role blocks as documented below:
  [description] (Required) Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
  [display_name] (Required) Display name for the app role that appears during app role assignment and in consent experiences.
  [enabled] (Optional) Determines if the app role is enabled. Defaults to true.
  [id] (Auto-Required) The unique identifier of the app role. Must be a valid UUID. Value will be auto generated by a random_uuid resource.
  [value] (Required) As Mapping object name is the unique value of the app role.
  EOT
  type = map(object({
    display_name         = string
    allowed_member_types = list(string)
    description          = string
    enabled              = bool
  }))
  default  = {}
  nullable = true
}

variable "spa_redirect_uris" {
  description = "The URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent."
  type        = list(string)
  default     = []
}

variable "web" {
  description = <<EOT
    (Optional) A collection of web blocks as documented below:
    [homepage_url] (Optional) Home page or landing page of the application.
    [implicit_grant] (Optional) An implicit_grant block as documented above.
    [logout_url] (Optional) The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
    [redirect_uris] (Optional) A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid http URL or a URN.
  EOT
  type = object({
    homepage_url = optional(string)
    implicit_grant = optional(object({
      access_token_issuance_enabled = optional(bool)
      id_token_issuance_enabled     = optional(bool)
    }))
    logout_url    = optional(string)
    redirect_uris = optional(list(string))
  })
  default  = null
  nullable = true
}

variable "azuread_service_principal_assignment_required" {
  description = "Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to false."
  type        = bool
  default     = false
}

variable "group_membership_claims" {
  description = <<EOT
  Configures the groups claim issued in a user or OAuth 2.0 access token that the app expects.
  Available options are:
  - None: No groups claim is issued in the token.
  - SecurityGroup: Groups claim includes the security groups.
  - All: Groups claim includes all types of groups.
  - DirectoryRole: Groups claim includes directory roles.
  EOT
  type        = set(string)
  default     = null
  nullable    = true
}

variable "fallback_public_client_enabled" {
  description = <<EOT
    Specifies whether the application is a public client.
    Appropriate for apps using token grant flows that don't use a redirect URI.
    Defaults to false.
  EOT
  type        = bool
  default     = false
}

variable "feature_tags" {
  description = <<EOT
    (Optional) A collection of feature tags blocks as documented below:
    [custom_single_sign_on] (Optional) Custom single sign-on feature tag.
    [enterprise] (Optional) Enterprise feature tag.
    [gallery] (Optional) Gallery feature tag.
    [hide] (Optional) Hide feature tag.
  EOT
  type = list(object({
    custom_single_sign_on = bool
    enterprise            = bool
    gallery               = bool
    hide                  = bool
  }))
  default = [{
    custom_single_sign_on = false
    enterprise            = false
    gallery               = false
    hide                  = false
  }]
  nullable = true
}

variable "oauth2_permission_scopes" {
  description = <<EOT
  (Optional) A collection of oauth2_permission_scope blocks as documented below:
    [admin_consent_display_name] (Required) Display name for the admin consent.
    [admin_consent_description] (Required) Description for the admin consent.
    [user_consent_description] (Required) Description for the user consent.
    [user_consent_display_name] (Required) Display name for the user consent.
    [enabled] (Optional) Determines if the permission scope is enabled. Defaults to true.
    [type] (Required) The type of the permission scope. Must be "User" or "Admin".
    [value] (Required) As Mapping object name is the unique value of the permission scope.
  EOT
  type = map(object({
    admin_consent_display_name = string
    admin_consent_description  = string
    user_consent_description   = optional(string)
    user_consent_display_name  = optional(string)
    enabled                    = bool
    type                       = string
  }))
  default = {
    "user_impersonation" = {
      admin_consent_display_name = "Access api"
      admin_consent_description  = "Allow the application to access the api on your behalf."
      user_consent_description   = "Allow the application to access the api on your behalf."
      user_consent_display_name  = "Access api"
      enabled                    = true
      type                       = "User"
    }
  }
  nullable = true
}
